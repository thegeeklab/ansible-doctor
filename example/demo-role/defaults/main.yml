---
# @var demo_role_unset:description: Values can be plain strings, but there is no magic or autoformatting...
# @var demo_role_unset:example: demo_role_unset: some_value
demo_role_unset:

demo_role_empty: ""
demo_role_single: "b"

# @var demo_role_empty_dict:description: >
# ... or valid json can be used. In this case, the json will be automatically prefixed with the annotation key
# and filters like `to_nice_yaml` can be used in templates. To get it working, the json need to be prefixed with a `$`.
# @end
# @var demo_role_empty_dict:example: $ {"key1": {"sub": "some value"}, "key2": {"sublist": ["subval1", "subval2"]}}
demo_role_empty_dict: {}

# @var demo_role_dict:example: >
# demo_role_dict:
#   key1:
#     sub: some value
#
#   # Inline description
#   key2:
#     sublist:
#       - subval1
#       - subval2
# @end
demo_role_dict:
  key1:
    sub: some value

# @var demo_role_undefined_var:description: >
# To highlight a variable that has not set a value by default, this is one way to achieve it.
# Make sure to flag it as json value: `@var demo_role_undefined_var: $ "_unset_"`
#
# | Attribute | Description |
# | --- | --- |
# | value1 | desc1 |
#
# @end
# @var demo_role_undefined_var: $ "_unset_"

# @var demo_role_other_tags:description: >
# If a variable need some more explanation, this is a good place to do so.
# @end
# @var demo_role_other_tags:example: $>
# [
#   "package1",
#   "package2"
# ]
# @end
demo_role_other_tags: []

## Simple value
# @var demo_role_override: $ "test"
demo_role_override: original

## Complex value
# @var demo_role_override_complex:value: $ {"foo":"bar", "second":"value"}
demo_role_override_complex: {}

# @var demo_role_deprecated:deprecated:
demo_role_deprecated: "b"

# @var demo_role_deprecated_info:deprecated: >
# This variable is deprected since `v2.0.0` and will be removed in a future release.
# @var demo_role_deprecated_info:type: string
demo_role_deprecated_info: "a"
